name: Daily KPI Cache

on:
  schedule:
    # 11:00 PM IST = 17:30 UTC
    - cron: "30 17 * * *"
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: daily-kpi-cache
  cancel-in-progress: true

jobs:
  run-cache:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    env:
      PYTHONUNBUFFERED: "1"

      # ---- Script tunables ----
      KPI_BATCH_SIZE: "600"
      KPI_CACHE_TTL_DAYS: "14"
      KPI_MAX_WORKERS: "4"
      KPI_RETRIES: "4"
      KPI_BACKOFF_SECS: "1.2"
      KPI_EMBED_RPM: "1200"
      KPI_THROTTLE_SECS: "0.05"

      # ---- DB / SSL ----
      PGHOST: ${{ secrets.PGHOST }}
      PGDATABASE: ${{ secrets.PGDATABASE }}
      PGUSER: ${{ secrets.PGUSER }}
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      PGPORT: ${{ secrets.PGPORT }}   # may be empty; we default to 5432
      PGSSLMODE: "require"            # enforce SSL to Azure Postgres

      # (Optional) single DSN, if you prefer:
      # PG_DSN: ${{ secrets.PG_DSN }}

      # ---- Azure OpenAI ----
      AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
      AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
      AZURE_API_VERSION: ${{ secrets.AZURE_API_VERSION }}
      AZURE_EMBED_DEPLOYMENT: ${{ secrets.AZURE_EMBED_DEPLOYMENT }}
      AZURE_EMBED_VERSION: ${{ secrets.AZURE_EMBED_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install sqlalchemy psycopg2-binary
          fi

      # Preflight: show exactly what's missing if DB secrets aren’t set
      - name: Preflight secrets check
        run: |
          python - <<'PY'
          import os, sys
          dsn = (os.environ.get("PG_DSN") or "").strip()
          if dsn:
            print("Using PG_DSN")
            sys.exit(0)
          required = ["PGHOST","PGDATABASE","PGUSER","PGPASSWORD"]
          missing = [k for k in required if not (os.environ.get(k) or "").strip()]
          if missing:
            print("❌ Missing DB secrets. Provide either:", file=sys.stderr)
            print("  - PG_DSN (recommended), e.g. postgresql+psycopg2://user:pass@host:5432/db?sslmode=require", file=sys.stderr)
            print("    OR", file=sys.stderr)
            print("  - PGHOST, PGDATABASE, PGUSER, PGPASSWORD (PGPORT optional; SSL is enforced)", file=sys.stderr)
            print("Missing:", ", ".join(missing), file=sys.stderr)
            sys.exit(1)
          print("Using individual PG* vars")
          PY

      # Verify DB: use SSL; try Flexible user ('mathcoadmin') first, then Single-server style ('mathcoadmin@psql-scout')
      - name: Verify DB connection
        run: |
          python - <<'PY'
          import os, sys
          import psycopg2
          import urllib.parse as up

          dsn = (os.environ.get("PG_DSN") or "").strip()
          sslmode = (os.environ.get("PGSSLMODE") or "require").strip()

          if dsn:
            # Ensure sslmode=require is present in DSN if not specified
            if "sslmode=" not in dsn:
              sep = "&" if "?" in dsn else "?"
              dsn = f"{dsn}{sep}sslmode={sslmode}"
            try:
              conn = psycopg2.connect(dsn)
              with conn.cursor() as cur:
                cur.execute("SELECT 1;"); print("DB OK via DSN:", cur.fetchone())
              conn.close()
              sys.exit(0)
            except Exception as e:
              print("❌ DSN connection failed:", e, file=sys.stderr)
              sys.exit(1)

          def env(name, default=None, required=False):
            v = os.environ.get(name)
            if v is None or str(v).strip()=="":
              if required:
                print(f"Missing or empty env: {name}", file=sys.stderr); sys.exit(1)
              return default
            return v.strip()

          host = env("PGHOST", required=True)
          db   = env("PGDATABASE", required=True)
          user = env("PGUSER", required=True)
          pw   = env("PGPASSWORD", required=True)
          port = int((env("PGPORT") or "5432"))

          def try_conn(u):
            try:
              conn = psycopg2.connect(host=host, dbname=db, user=u, password=pw, port=port, sslmode=sslmode)
              with conn.cursor() as cur:
                cur.execute("SELECT 1;")
                print(f"DB OK via user='{u}'")
              conn.close()
              return True
            except Exception as e:
              print(f"Attempt with user='{u}' failed: {e}", file=sys.stderr)
              return False

          # Try as-is (Flexible Server style)
          if try_conn(user):
            sys.exit(0)

          # Try Single Server suffix user@servername
          server_prefix = host.split(".")[0] if "." in host else host
          user2 = f"{user}@{server_prefix}"
          if try_conn(user2):
            sys.exit(0)

          print("❌ Could not connect with either username style. Check credentials, firewall, and SSL.", file=sys.stderr)
          sys.exit(1)
          PY

      - name: Run daily_kpi_cache (with simple retry)
        run: |
          set -e
          for i in 1 2; do
            echo "Attempt $i..."
            if python -m scripts.daily_kpi_cache; then
              echo "✅ Success on attempt $i"
              break
            fi
            if [ "$i" = "2" ]; then
              echo "❌ Failed after 2 attempts"; exit 1
            fi
            echo "Retrying in 45s..."; sleep 45
          done

      - name: Upload artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: daily-kpi-cache-run
          path: |
            **/logs/*.log
          if-no-files-found: ignore
# =========================