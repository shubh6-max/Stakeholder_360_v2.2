name: Daily KPI Cache

on:
  schedule:
    # 11:00 AM IST = 05:30 UTC
    - cron: "30 5 * * *"
  workflow_dispatch: {}   # allow manual runs

permissions:
  contents: read

concurrency:
  group: daily-kpi-cache
  cancel-in-progress: true

jobs:
  run-cache:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    env:
      PYTHONUNBUFFERED: "1"

      # ---- Script tunables ----
      KPI_BATCH_SIZE: "600"        # start higher; adjust after first run
      KPI_CACHE_TTL_DAYS: "14"
      KPI_MAX_WORKERS: "4"         # Stage 1
      KPI_RETRIES: "4"
      KPI_BACKOFF_SECS: "1.2"
      KPI_EMBED_RPM: "1200"        # Stage 1 (under your 5.9k RPM)
      KPI_THROTTLE_SECS: "0.05"

      # ---- DB / Azure ----
      PGHOST: ${{ secrets.PGHOST }}
      PGDATABASE: ${{ secrets.PGDATABASE }}
      PGUSER: ${{ secrets.PGUSER }}
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      PGPORT: ${{ secrets.PGPORT }}

      AZURE_ENDPOINT: ${{ secrets.AZURE_ENDPOINT }}
      AZURE_API_KEY: ${{ secrets.AZURE_API_KEY }}
      AZURE_API_VERSION: ${{ secrets.AZURE_API_VERSION }}
      AZURE_EMBED_DEPLOYMENT: ${{ secrets.AZURE_EMBED_DEPLOYMENT }}
      AZURE_EMBED_VERSION: ${{ secrets.AZURE_EMBED_VERSION }}


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install sqlalchemy psycopg2-binary
          fi

      - name: Verify DB connection (fail fast)
        run: |
          python - <<'PY'
          import os, psycopg2
          conn = psycopg2.connect(
            host=os.environ["PGHOST"],
            dbname=os.environ["PGDATABASE"],
            user=os.environ["PGUSER"],
            password=os.environ["PGPASSWORD"],
            port=int(os.environ.get("PGPORT","5432")),
          )
          with conn.cursor() as cur:
            cur.execute("SELECT 1;")
            print("DB OK:", cur.fetchone())
          conn.close()
          PY

      - name: Run daily_kpi_cache (with simple retry)
        run: |
          set -e
          for i in 1 2; do
            echo "Attempt $i..."
            if python -m scripts.daily_kpi_cache; then
              echo "Success on attempt $i"
              break
            fi
            if [ "$i" = "2" ]; then
              echo "Failed after 2 attempts"; exit 1
            fi
            echo "Retrying in 45s..."; sleep 45
          done

      - name: Upload artifacts (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: daily-kpi-cache-run
          path: |
            **/logs/*.log
          if-no-files-found: ignore
